// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package speakingExam

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecordingServiceClient is the client API for RecordingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordingServiceClient interface {
	CreateRecording(ctx context.Context, in *CreateRecordingRequest, opts ...grpc.CallOption) (*Recording, error)
	ListRecordings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListRecordingsResponse, error)
	DownloadRecordings(ctx context.Context, in *DownloadRecordingsRequest, opts ...grpc.CallOption) (RecordingService_DownloadRecordingsClient, error)
}

type recordingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordingServiceClient(cc grpc.ClientConnInterface) RecordingServiceClient {
	return &recordingServiceClient{cc}
}

func (c *recordingServiceClient) CreateRecording(ctx context.Context, in *CreateRecordingRequest, opts ...grpc.CallOption) (*Recording, error) {
	out := new(Recording)
	err := c.cc.Invoke(ctx, "/speakingExam.RecordingService/CreateRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordingServiceClient) ListRecordings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListRecordingsResponse, error) {
	out := new(ListRecordingsResponse)
	err := c.cc.Invoke(ctx, "/speakingExam.RecordingService/ListRecordings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordingServiceClient) DownloadRecordings(ctx context.Context, in *DownloadRecordingsRequest, opts ...grpc.CallOption) (RecordingService_DownloadRecordingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RecordingService_ServiceDesc.Streams[0], "/speakingExam.RecordingService/downloadRecordings", opts...)
	if err != nil {
		return nil, err
	}
	x := &recordingServiceDownloadRecordingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RecordingService_DownloadRecordingsClient interface {
	Recv() (*DownloadRecordingsResponse, error)
	grpc.ClientStream
}

type recordingServiceDownloadRecordingsClient struct {
	grpc.ClientStream
}

func (x *recordingServiceDownloadRecordingsClient) Recv() (*DownloadRecordingsResponse, error) {
	m := new(DownloadRecordingsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RecordingServiceServer is the server API for RecordingService service.
// All implementations must embed UnimplementedRecordingServiceServer
// for forward compatibility
type RecordingServiceServer interface {
	CreateRecording(context.Context, *CreateRecordingRequest) (*Recording, error)
	ListRecordings(context.Context, *empty.Empty) (*ListRecordingsResponse, error)
	DownloadRecordings(*DownloadRecordingsRequest, RecordingService_DownloadRecordingsServer) error
	mustEmbedUnimplementedRecordingServiceServer()
}

// UnimplementedRecordingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecordingServiceServer struct {
}

func (UnimplementedRecordingServiceServer) CreateRecording(context.Context, *CreateRecordingRequest) (*Recording, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecording not implemented")
}
func (UnimplementedRecordingServiceServer) ListRecordings(context.Context, *empty.Empty) (*ListRecordingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecordings not implemented")
}
func (UnimplementedRecordingServiceServer) DownloadRecordings(*DownloadRecordingsRequest, RecordingService_DownloadRecordingsServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadRecordings not implemented")
}
func (UnimplementedRecordingServiceServer) mustEmbedUnimplementedRecordingServiceServer() {}

// UnsafeRecordingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordingServiceServer will
// result in compilation errors.
type UnsafeRecordingServiceServer interface {
	mustEmbedUnimplementedRecordingServiceServer()
}

func RegisterRecordingServiceServer(s grpc.ServiceRegistrar, srv RecordingServiceServer) {
	s.RegisterService(&RecordingService_ServiceDesc, srv)
}

func _RecordingService_CreateRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingServiceServer).CreateRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speakingExam.RecordingService/CreateRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingServiceServer).CreateRecording(ctx, req.(*CreateRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordingService_ListRecordings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingServiceServer).ListRecordings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speakingExam.RecordingService/ListRecordings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingServiceServer).ListRecordings(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordingService_DownloadRecordings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRecordingsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecordingServiceServer).DownloadRecordings(m, &recordingServiceDownloadRecordingsServer{stream})
}

type RecordingService_DownloadRecordingsServer interface {
	Send(*DownloadRecordingsResponse) error
	grpc.ServerStream
}

type recordingServiceDownloadRecordingsServer struct {
	grpc.ServerStream
}

func (x *recordingServiceDownloadRecordingsServer) Send(m *DownloadRecordingsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RecordingService_ServiceDesc is the grpc.ServiceDesc for RecordingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "speakingExam.RecordingService",
	HandlerType: (*RecordingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecording",
			Handler:    _RecordingService_CreateRecording_Handler,
		},
		{
			MethodName: "ListRecordings",
			Handler:    _RecordingService_ListRecordings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "downloadRecordings",
			Handler:       _RecordingService_DownloadRecordings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "recording.proto",
}
