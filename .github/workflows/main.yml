name: Build and Push

on:
  push:
    tags:
      - v*

jobs:
  build-and-deploy-server:
    runs-on: ubuntu-18.04
    timeout-minutes: 300

    steps:
      - uses: actions/checkout@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_SERVER_REPO }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f server/Dockerfile.prod ./server
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Render Amazon ECS task definition
        id: render-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_SERVER_REPO }}
        with:
          task-definition: aws/task-definition.json
          container-name: $ECR_REPOSITORY
          image: $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        env:
          ECS_SERVICE: ${{ secrets.AWS_ECS_SERVICE }}
          ECS_CLUSTER: ${{ secrets.AWS_ECS_CLUSTER }}
        with:
          task-definition: ${{ steps.render-container.outputs.task-definition }}
          service: $ECS_SERVICE
          cluster: $ECS_CLUSTER

  build-and-deploy-proxy:
    runs-on: ubuntu-18.04
    timeout-minutes: 300

    steps:
      - uses: actions/checkout@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build push proxy image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_PROXY_REPO }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f proxy/Dockerfile.prod ./proxy
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Render Amazon ECS task definition
        id: render-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_PROXY_REPO }}
        with:
          task-definition: aws/task-definition.json
          container-name: $ECR_REPOSITORY
          image: $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        env:
          ECS_SERVICE: ${{ secrets.AWS_ECS_SERVICE }}
          ECS_CLUSTER: ${{ secrets.AWS_ECS_CLUSTER }}
        with:
          task-definition: ${{ steps.render-container.outputs.task-definition }}
          service: $ECS_SERVICE
          cluster: $ECS_CLUSTER

  build-and-deploy-client:
    runs-on: ubuntu-18.04
    timeout-minutes: 300

    steps:
      - uses: actions/checkout@v1

      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: install
        working-directory: ./client
        run: yarn install --frozen-lockfile

      - name: build
        working-directory: ./client
        run: yarn build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-1

      - name: S3 sync
        working-directory: ./client/out
        run: aws s3 sync . s3://speaking-exam-client --delete --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
